{% include "copyright.tmpl" %}
// Headers
#include "rpg_{{ filename }}.h"

{%- if struct_name is needs_ctor %}
/**
 * Constructor.
 */
RPG::{{ struct_name }}::{{ struct_name }}() {
	Init();
}
{%- endif %}

RPG::{{ struct_name }}::{{ struct_name }}(rapidjson::Value& json_values) {
	this->json_values = &json_values;
}
{% for field in fields[struct_name]|field_is_used %}
{%- if not field.size %}
{%- if field is pod %}
{{ field|cpp_type }} RPG::{{ struct_name }}::Get{{ field|method }}() const {
	return getter<{{ field|cpp_type }}>("{{ field.name }}");
}

void RPG::{{ struct_name }}::Set{{ field|method }}({{ field|cpp_type }} {{ field.name }}) {
	setter<{{ field|cpp_type }}>("{{ field.name }}", {{ field.name }});
}
{%- elif field is vector %}
const {{ field|cpp_type }}& RPG::{{ struct_name }}::Get{{ field|method }}() const {
	return vector_getter<const {{ field|cpp_type }}&, {{ field|cpp_inner_type }}>("{{ field.name }}");
}

{{ field|cpp_type }}& RPG::{{ struct_name }}::Get{{ field|method }}() {
	return vector_getter<{{ field|cpp_type }}&, {{ field|cpp_inner_type }}>("{{ field.name }}");
}
{%- else %}
const {{ field|cpp_type }}& RPG::{{ struct_name }}::Get{{ field|method }}() const {
	return getter<const {{ field|cpp_type }}&>("{{ field.name }}");
}

{{ field|cpp_type }}& RPG::{{ struct_name }}::Get{{ field|method }}() {
	return getter<{{ field|cpp_type }}&>("{{ field.name }}");
}

void RPG::{{ struct_name }}::Set{{ field|method }}(const {{ field|cpp_type }}& {{ field.name }}) {
	setter<{{ field|cpp_type }}>("{{ field.name }}", {{ field.name }});
}
{%- endif %}
{%- endif %}
{% endfor %}
