{% include "copyright.tmpl" %}
// Headers
#include "{{ type }}_reader.h"
#include "{{ type }}_chunks.h"
#include "reader_struct.h"

// Read {{ struct_name }}.

{% set LCF_CHUNK_SUFFIX = type|upper + "_Reader" %}
{% set LCF_CURRENT_STRUCT = struct_name %}

template <>
char const* const Struct<RPG::{{ LCF_CURRENT_STRUCT }}>::name = "{{ LCF_CURRENT_STRUCT }}";

template <>
Field<RPG::{{ LCF_CURRENT_STRUCT }}> const* Struct<RPG::{{ LCF_CURRENT_STRUCT }}>::fields[] = {
{%- for field in fields[struct_name]|field_is_used %}
	{%- if field.size %}
	new SizeField<RPG::{{ LCF_CURRENT_STRUCT }}, {{ field|cpp_type }}>(
		&RPG::{{ LCF_CURRENT_STRUCT }}::{{ field.name }},
		{{ LCF_CHUNK_SUFFIX }}::Chunk{{ LCF_CURRENT_STRUCT }}::{{ field.name }}_size
	),
	{%- else %}
	new TypedField<RPG::{{ LCF_CURRENT_STRUCT }}, {{ field|cpp_type }}>(
		&RPG::{{ LCF_CURRENT_STRUCT }}::{{ field.name }},
		{{ LCF_CHUNK_SUFFIX }}::Chunk{{ LCF_CURRENT_STRUCT }}::{{ field.name }},
		"{{ field.name }}"
	),
	{%- endif %}
{%- endfor %}
	NULL
};
